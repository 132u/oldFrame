// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18408
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Spec.Subscription
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SubscriptionRedundancy")]
    [NUnit.Framework.CategoryAttribute("SubscriptionRedundancy")]
    public partial class SubscriptionRedundancyFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SubscriptionRedundancy.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SubscriptionRedundancy", "", ProgrammingLanguage.CSharp, new string[] {
                        "SubscriptionRedundancy"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subscribe page - Should display Subscribe page")]
        public virtual void SubscribePage_ShouldDisplaySubscribePage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subscribe page - Should display Subscribe page", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
 testRunner.Given("I\'m on the Homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
 testRunner.And("I\'m not logged in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 7
 testRunner.When("I enter Subscribe page by Header Component link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
 testRunner.Then("Subscribtion One Step page should be displayed correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subscribe page - Should redirect to step two")]
        public virtual void SubscribePage_ShouldRedirectToStepTwo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subscribe page - Should redirect to step two", ((string[])(null)));
#line 10
this.ScenarioSetup(scenarioInfo);
#line 11
 testRunner.Given("I\'m on the Homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
 testRunner.And("I\'m not logged in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.When("I try to get to the step two of subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
 testRunner.Then("I should be redirected to the Subscribe Second Step page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subscribe page - Should get subscription by invoice as a new user with valid data" +
            " provided")]
        public virtual void SubscribePage_ShouldGetSubscriptionByInvoiceAsANewUserWithValidDataProvided()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subscribe page - Should get subscription by invoice as a new user with valid data" +
                    " provided", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given("I\'m on the Subscribe page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
 testRunner.When("I try to get subscription by invoice as a new user with valid data provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
 testRunner.Then("I should get subscription as a new user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subscribe page - Should get EuroHedge subscription by invoice as a new user with " +
            "valid data provided")]
        public virtual void SubscribePage_ShouldGetEuroHedgeSubscriptionByInvoiceAsANewUserWithValidDataProvided()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subscribe page - Should get EuroHedge subscription by invoice as a new user with " +
                    "valid data provided", ((string[])(null)));
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.Given("I\'m on the EuroHedge Subscribe page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
 testRunner.When("I try to get subscription by invoice as a new user with valid data provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
 testRunner.Then("I should get subscription as a new user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subscribe page - Should get AsiaHedge subscription by invoice as a new user with " +
            "valid data provided")]
        public virtual void SubscribePage_ShouldGetAsiaHedgeSubscriptionByInvoiceAsANewUserWithValidDataProvided()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subscribe page - Should get AsiaHedge subscription by invoice as a new user with " +
                    "valid data provided", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.Given("I\'m on the AsiaHedge Subscribe page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
 testRunner.When("I try to get subscription by invoice as a new user with valid data provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.Then("I should get subscription as a new user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subscribe page - Should get AbsoluteReturn subscription by invoice as a new user " +
            "with valid data provided")]
        public virtual void SubscribePage_ShouldGetAbsoluteReturnSubscriptionByInvoiceAsANewUserWithValidDataProvided()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subscribe page - Should get AbsoluteReturn subscription by invoice as a new user " +
                    "with valid data provided", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("I\'m on the AbsoluteReturn Subscribe page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.When("I try to get subscription by invoice as a new user with valid data provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
 testRunner.Then("I should get subscription as a new user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subscribe page - Should get AbsoluteUCITS subscription by invoice as a new user w" +
            "ith valid data provided")]
        public virtual void SubscribePage_ShouldGetAbsoluteUCITSSubscriptionByInvoiceAsANewUserWithValidDataProvided()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subscribe page - Should get AbsoluteUCITS subscription by invoice as a new user w" +
                    "ith valid data provided", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
 testRunner.Given("I\'m on the AbsoluteUCITS Subscribe page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 38
 testRunner.When("I try to get subscription by invoice as a new user with valid data provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
 testRunner.Then("I should get subscription as a new user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subscribe page - Should get InvestHedge subscription by invoice as a new user wit" +
            "h valid data provided")]
        public virtual void SubscribePage_ShouldGetInvestHedgeSubscriptionByInvoiceAsANewUserWithValidDataProvided()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subscribe page - Should get InvestHedge subscription by invoice as a new user wit" +
                    "h valid data provided", ((string[])(null)));
#line 41
this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given("I\'m on the InvestHedge Subscribe page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 43
 testRunner.When("I try to get subscription by invoice as a new user with valid data provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
 testRunner.Then("I should get subscription as a new user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subscribe page - Should get warning mesasge when invalid credit data provided")]
        [NUnit.Framework.TestCaseAttribute("Amex", null)]
        [NUnit.Framework.TestCaseAttribute("JCB", null)]
        [NUnit.Framework.TestCaseAttribute("Delta", null)]
        [NUnit.Framework.TestCaseAttribute("Visa Electron", null)]
        [NUnit.Framework.TestCaseAttribute("Maestro Int.", null)]
        public virtual void SubscribePage_ShouldGetWarningMesasgeWhenInvalidCreditDataProvided(string credit_Card, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subscribe page - Should get warning mesasge when invalid credit data provided", exampleTags);
#line 46
this.ScenarioSetup(scenarioInfo);
#line 47
 testRunner.Given("I\'m on the AbsoluteUCITS Subscribe page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 48
 testRunner.When("I try to get subscription by credit card as a new user with valid data provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 49
 testRunner.And(string.Format("I fill incorrect data for \"{0}\"", credit_Card), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
 testRunner.Then("I should get warning message \'Your order was declined. Please verify your informa" +
                    "tion.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subscribe page - Should get warning mesasge when invalid number card provided")]
        [NUnit.Framework.TestCaseAttribute("Amex", null)]
        [NUnit.Framework.TestCaseAttribute("JCB", null)]
        [NUnit.Framework.TestCaseAttribute("Delta", null)]
        [NUnit.Framework.TestCaseAttribute("Visa Electron", null)]
        [NUnit.Framework.TestCaseAttribute("Maestro Int.", null)]
        public virtual void SubscribePage_ShouldGetWarningMesasgeWhenInvalidNumberCardProvided(string credit_Card, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subscribe page - Should get warning mesasge when invalid number card provided", exampleTags);
#line 59
this.ScenarioSetup(scenarioInfo);
#line 60
 testRunner.Given("I\'m on the AbsoluteUCITS Subscribe page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 61
 testRunner.When("I try to get subscription by credit card as a new user with valid data provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 62
 testRunner.And(string.Format("I fill invalid card number data for \"{0}\"", credit_Card), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
 testRunner.Then("I should get warning message about number card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subscribe page -Check State combobox")]
        [NUnit.Framework.TestCaseAttribute("Canada", null)]
        [NUnit.Framework.TestCaseAttribute("United States", null)]
        public virtual void SubscribePage_CheckStateCombobox(string country, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subscribe page -Check State combobox", exampleTags);
#line 72
this.ScenarioSetup(scenarioInfo);
#line 73
 testRunner.Given("I\'m on the InvestHedge Subscribe page and select 2nd package", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 74
 testRunner.And("state combox is read only", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
 testRunner.When(string.Format("I fill all required fields and set \"{0}\"", country), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 76
 testRunner.Then("warning message appears that State combobox  is required", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subscribe page - User can get two product subscriptions")]
        public virtual void SubscribePage_UserCanGetTwoProductSubscriptions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subscribe page - User can get two product subscriptions", ((string[])(null)));
#line 82
this.ScenarioSetup(scenarioInfo);
#line 83
 testRunner.Given("I\'m on the InvestHedge Subscribe page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 84
 testRunner.When("I try to get subscription by credit card as a new user with valid data provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 85
 testRunner.And("I fill all required data for credit card", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
 testRunner.Then("I should get subscription as a new user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 87
 testRunner.And("open mailtrap", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
 testRunner.And("find my password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
 testRunner.And("I login as user with one subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
 testRunner.Given("I\'m on the AbsoluteUCITS Subscribe page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 91
 testRunner.When("I try to get subscription by credit card as a new user with valid data provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 92
 testRunner.Then("I should get subscription as a new user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subscribe page - Check that for US country US state combobox contains correct sta" +
            "te list")]
        public virtual void SubscribePage_CheckThatForUSCountryUSStateComboboxContainsCorrectStateList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subscribe page - Check that for US country US state combobox contains correct sta" +
                    "te list", ((string[])(null)));
#line 94
this.ScenarioSetup(scenarioInfo);
#line 95
 testRunner.Given("I\'m on the AbsoluteUCITS Subscribe page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 96
 testRunner.When("I set US in Country combobox", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 97
 testRunner.Then("US State combobox contains correct list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subscribe page - Check that Payment page is displayed correctly for each Country")]
        public virtual void SubscribePage_CheckThatPaymentPageIsDisplayedCorrectlyForEachCountry()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subscribe page - Check that Payment page is displayed correctly for each Country", ((string[])(null)));
#line 99
this.ScenarioSetup(scenarioInfo);
#line 100
 testRunner.When("I set country fill another fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
