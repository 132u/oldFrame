// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18408
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Spec.Checkout
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("YourDetails")]
    public partial class YourDetailsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "YourDetails.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "YourDetails", "In order to avoid silly mistakes\r\nAs a math idiot\r\nI want to be told the sum of t" +
                    "wo numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Checkout - YourDetails - Should register with any US state")]
        [NUnit.Framework.CategoryAttribute("tradefinancemagazine.com")]
        [NUnit.Framework.TestCaseAttribute("ALABAMA", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("ALASKA", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("ARIZONA", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("ARKANSAS", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("ARMED FORCES AMERICA", "34099", null)]
        [NUnit.Framework.TestCaseAttribute("ARMED FORCES EUROPE", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("ARMED FORCES PACIFIC", "34002", null)]
        [NUnit.Framework.TestCaseAttribute("CALIFORNIA", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("COLORADO", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("CONNECTICUT", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("DELAWARE", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("DISTRICT OF COLUMBIA", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("FLORIDA", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("GEORGIA", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("HAWAII", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("IDAHO", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("ILLINOIS", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("INDIANA", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("IOWA", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("KANSAS", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("KENTUCKY", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("LOUISIANA", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("MAINE", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("MARYLAND", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("MASSACHUSETTS", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("MICHIGAN", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("MINNESOTA", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("MISSISSIPPI", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("MISSOURI", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("MONTANA", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("NEBRASKA", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("NEVADA", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("NEW HAMPSHIRE", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("NEW JERSEY", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("NEW MEXICO", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("NEW YORK", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("NORTH CAROLINA", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("NORTH DAKOTA", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("OHIO", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("OKLAHOMA", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("OREGON", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("PENNSYLVANIA", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("RHODE ISLAND", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("SOUTH CAROLINA", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("SOUTH DAKOTA", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("TENNESSEE", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("TEXAS", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("UTAH", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("VERMONT", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("VIRGINIA", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("WASHINGTON", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("WEST VIRGINIA", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("WISCONSIN", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("WYOMING", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("GUAM", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("PUERTO RICO", "00000", null)]
        [NUnit.Framework.TestCaseAttribute("VIRGIN ISLANDS", "00000", null)]
        public virtual void Checkout_YourDetails_ShouldRegisterWithAnyUSState(string state, string postCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tradefinancemagazine.com"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checkout - YourDetails - Should register with any US state", @__tags);
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("Given I\'ve selected basic subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("I register with new email", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.And(string.Format("I create a new account for US with any {0} and {1}", state, postCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.Then("I should subscribe successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Checkout - YourDetails - Should register with any Canadian province")]
        [NUnit.Framework.CategoryAttribute("tradefinancemagazine.com")]
        [NUnit.Framework.TestCaseAttribute("ALBERTA", "T4G 0K1", null)]
        [NUnit.Framework.TestCaseAttribute("BRITISH COLUMBIA", "V0K 0A7", null)]
        [NUnit.Framework.TestCaseAttribute("MANITOBA", "R0K 0A0", null)]
        [NUnit.Framework.TestCaseAttribute("NEW BRUNSWICK", "E4Y 1R3", null)]
        [NUnit.Framework.TestCaseAttribute("NEWFOUNDLAND AND LABRADOR", "A0N 1A0", null)]
        [NUnit.Framework.TestCaseAttribute("NORTHWEST TERRITORIES", "X0E 0A0", null)]
        [NUnit.Framework.TestCaseAttribute("NOVA SCOTIA", "B0N 2H0", null)]
        [NUnit.Framework.TestCaseAttribute("NUNAVUT", "X0A 0A0", null)]
        [NUnit.Framework.TestCaseAttribute("ONTARIO", "L7J 0A1", null)]
        [NUnit.Framework.TestCaseAttribute("PRINCE EDWARD ISLAND", "C0A 1H1", null)]
        [NUnit.Framework.TestCaseAttribute("QUEBEC", "J0E 1B0", null)]
        [NUnit.Framework.TestCaseAttribute("SASKATCHEWAN", "S0N 0A0", null)]
        [NUnit.Framework.TestCaseAttribute("YUKON TERRITORY", "Y1A 0A1", null)]
        public virtual void Checkout_YourDetails_ShouldRegisterWithAnyCanadianProvince(string province, string postCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tradefinancemagazine.com"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checkout - YourDetails - Should register with any Canadian province", @__tags);
#line 73
this.ScenarioSetup(scenarioInfo);
#line 74
 testRunner.Given("Given I\'ve selected basic subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 75
 testRunner.When("I register with new email", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 76
 testRunner.And(string.Format("I create a new account for Canada with any {0} and {1}", province, postCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
 testRunner.Then("I should subscribe successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Checkout - YourDetails - Should register with any country")]
        [NUnit.Framework.CategoryAttribute("tradefinancemagazine.com")]
        [NUnit.Framework.TestCaseAttribute("Afghanistan", null)]
        [NUnit.Framework.TestCaseAttribute("Aland Islands", null)]
        [NUnit.Framework.TestCaseAttribute("Albania", null)]
        [NUnit.Framework.TestCaseAttribute("Algeria", null)]
        [NUnit.Framework.TestCaseAttribute("American Samoa", null)]
        [NUnit.Framework.TestCaseAttribute("Andorra", null)]
        [NUnit.Framework.TestCaseAttribute("Angola", null)]
        [NUnit.Framework.TestCaseAttribute("Anguilla", null)]
        [NUnit.Framework.TestCaseAttribute("Antarctica", null)]
        [NUnit.Framework.TestCaseAttribute("Antigua and Barbuda", null)]
        [NUnit.Framework.TestCaseAttribute("Argentina", null)]
        [NUnit.Framework.TestCaseAttribute("Armenia", null)]
        [NUnit.Framework.TestCaseAttribute("Aruba", null)]
        [NUnit.Framework.TestCaseAttribute("Australia", null)]
        [NUnit.Framework.TestCaseAttribute("Austria", null)]
        [NUnit.Framework.TestCaseAttribute("Azerbaijan", null)]
        [NUnit.Framework.TestCaseAttribute("Bahamas", null)]
        [NUnit.Framework.TestCaseAttribute("Bahrain", null)]
        [NUnit.Framework.TestCaseAttribute("Bangladesh", null)]
        [NUnit.Framework.TestCaseAttribute("Barbados", null)]
        [NUnit.Framework.TestCaseAttribute("Belarus", null)]
        [NUnit.Framework.TestCaseAttribute("Belgium", null)]
        [NUnit.Framework.TestCaseAttribute("Belize", null)]
        [NUnit.Framework.TestCaseAttribute("Benin", null)]
        [NUnit.Framework.TestCaseAttribute("Bermuda", null)]
        [NUnit.Framework.TestCaseAttribute("Bhutan", null)]
        [NUnit.Framework.TestCaseAttribute("Bolivia, Plurinational State of", null)]
        [NUnit.Framework.TestCaseAttribute("Bonaire, Sint Eustatius and Saba", null)]
        [NUnit.Framework.TestCaseAttribute("Bosnia and Herzegovina", null)]
        [NUnit.Framework.TestCaseAttribute("Botswana", null)]
        [NUnit.Framework.TestCaseAttribute("Bouvet Island", null)]
        [NUnit.Framework.TestCaseAttribute("Brazil", null)]
        [NUnit.Framework.TestCaseAttribute("British Indian Ocean Territory", null)]
        [NUnit.Framework.TestCaseAttribute("Brunei Darussalam", null)]
        [NUnit.Framework.TestCaseAttribute("Bulgaria", null)]
        [NUnit.Framework.TestCaseAttribute("Burkina Faso", null)]
        [NUnit.Framework.TestCaseAttribute("Burundi", null)]
        [NUnit.Framework.TestCaseAttribute("Cambodia", null)]
        [NUnit.Framework.TestCaseAttribute("Cameroon", null)]
        [NUnit.Framework.TestCaseAttribute("Canada", null)]
        [NUnit.Framework.TestCaseAttribute("Cape Verde", null)]
        [NUnit.Framework.TestCaseAttribute("Cayman Islands", null)]
        [NUnit.Framework.TestCaseAttribute("Central African Republic", null)]
        [NUnit.Framework.TestCaseAttribute("Chad", null)]
        [NUnit.Framework.TestCaseAttribute("Chile", null)]
        [NUnit.Framework.TestCaseAttribute("China", null)]
        [NUnit.Framework.TestCaseAttribute("Christmas Island", null)]
        [NUnit.Framework.TestCaseAttribute("Cocos (Keeling) Islands", null)]
        [NUnit.Framework.TestCaseAttribute("Colombia", null)]
        [NUnit.Framework.TestCaseAttribute("Comoros", null)]
        [NUnit.Framework.TestCaseAttribute("Congo", null)]
        [NUnit.Framework.TestCaseAttribute("Congo, the Democratic Republic of the", null)]
        [NUnit.Framework.TestCaseAttribute("Cook Islands", null)]
        [NUnit.Framework.TestCaseAttribute("Costa Rica", null)]
        [NUnit.Framework.TestCaseAttribute("Cote d\'Ivoire", null)]
        [NUnit.Framework.TestCaseAttribute("Croatia", null)]
        [NUnit.Framework.TestCaseAttribute("Cuba", null)]
        [NUnit.Framework.TestCaseAttribute("Curaçao", null)]
        [NUnit.Framework.TestCaseAttribute("Cyprus", null)]
        [NUnit.Framework.TestCaseAttribute("Czech Republic", null)]
        [NUnit.Framework.TestCaseAttribute("Denmark", null)]
        [NUnit.Framework.TestCaseAttribute("Djibouti", null)]
        [NUnit.Framework.TestCaseAttribute("Dominica", null)]
        [NUnit.Framework.TestCaseAttribute("Dominican Republic", null)]
        [NUnit.Framework.TestCaseAttribute("Ecuador", null)]
        [NUnit.Framework.TestCaseAttribute("Egypt", null)]
        [NUnit.Framework.TestCaseAttribute("El Salvador", null)]
        [NUnit.Framework.TestCaseAttribute("Equatorial Guinea", null)]
        [NUnit.Framework.TestCaseAttribute("Eritrea", null)]
        [NUnit.Framework.TestCaseAttribute("Estonia", null)]
        [NUnit.Framework.TestCaseAttribute("Ethiopia", null)]
        [NUnit.Framework.TestCaseAttribute("Falkland Islands (Malvinas)", null)]
        [NUnit.Framework.TestCaseAttribute("Faroe Islands", null)]
        [NUnit.Framework.TestCaseAttribute("Fiji", null)]
        [NUnit.Framework.TestCaseAttribute("Finland", null)]
        [NUnit.Framework.TestCaseAttribute("France", null)]
        [NUnit.Framework.TestCaseAttribute("French Guiana", null)]
        [NUnit.Framework.TestCaseAttribute("French Polynesia", null)]
        [NUnit.Framework.TestCaseAttribute("French Southern Territories", null)]
        [NUnit.Framework.TestCaseAttribute("Gabon", null)]
        [NUnit.Framework.TestCaseAttribute("Gambia", null)]
        [NUnit.Framework.TestCaseAttribute("Georgia", null)]
        [NUnit.Framework.TestCaseAttribute("Germany", null)]
        [NUnit.Framework.TestCaseAttribute("Ghana", null)]
        [NUnit.Framework.TestCaseAttribute("Gibraltar", null)]
        [NUnit.Framework.TestCaseAttribute("Greece", null)]
        [NUnit.Framework.TestCaseAttribute("Greenland", null)]
        [NUnit.Framework.TestCaseAttribute("Grenada", null)]
        [NUnit.Framework.TestCaseAttribute("Guadeloupe", null)]
        [NUnit.Framework.TestCaseAttribute("Guam", null)]
        [NUnit.Framework.TestCaseAttribute("Guatemala", null)]
        [NUnit.Framework.TestCaseAttribute("Guernsey", null)]
        [NUnit.Framework.TestCaseAttribute("Guinea", null)]
        [NUnit.Framework.TestCaseAttribute("Guinea-Bissau", null)]
        [NUnit.Framework.TestCaseAttribute("Guyana", null)]
        [NUnit.Framework.TestCaseAttribute("Haiti", null)]
        [NUnit.Framework.TestCaseAttribute("Heard Island and McDonald Islands", null)]
        [NUnit.Framework.TestCaseAttribute("Holy See (Vatican City State)", null)]
        [NUnit.Framework.TestCaseAttribute("Honduras", null)]
        [NUnit.Framework.TestCaseAttribute("Hong Kong", null)]
        [NUnit.Framework.TestCaseAttribute("Hungary", null)]
        [NUnit.Framework.TestCaseAttribute("Iceland", null)]
        [NUnit.Framework.TestCaseAttribute("India", null)]
        [NUnit.Framework.TestCaseAttribute("Indonesia", null)]
        [NUnit.Framework.TestCaseAttribute("Iran, Islamic Republic of", null)]
        [NUnit.Framework.TestCaseAttribute("Iraq", null)]
        [NUnit.Framework.TestCaseAttribute("Ireland", null)]
        [NUnit.Framework.TestCaseAttribute("Isle of Man", null)]
        [NUnit.Framework.TestCaseAttribute("Israel", null)]
        [NUnit.Framework.TestCaseAttribute("Italy", null)]
        [NUnit.Framework.TestCaseAttribute("Jamaica", null)]
        [NUnit.Framework.TestCaseAttribute("Japan", null)]
        [NUnit.Framework.TestCaseAttribute("Jersey", null)]
        [NUnit.Framework.TestCaseAttribute("Jordan", null)]
        [NUnit.Framework.TestCaseAttribute("Kazakhstan", null)]
        [NUnit.Framework.TestCaseAttribute("Kenya", null)]
        [NUnit.Framework.TestCaseAttribute("Kiribati", null)]
        [NUnit.Framework.TestCaseAttribute("Korea, Democratic People\'s Republic of", null)]
        [NUnit.Framework.TestCaseAttribute("Korea, Republic of", null)]
        [NUnit.Framework.TestCaseAttribute("Kuwait", null)]
        [NUnit.Framework.TestCaseAttribute("Kyrgyzstan", null)]
        [NUnit.Framework.TestCaseAttribute("Lao People\'s Democratic Republic", null)]
        [NUnit.Framework.TestCaseAttribute("Latvia", null)]
        [NUnit.Framework.TestCaseAttribute("Lebanon", null)]
        [NUnit.Framework.TestCaseAttribute("Lesotho", null)]
        [NUnit.Framework.TestCaseAttribute("Liberia", null)]
        [NUnit.Framework.TestCaseAttribute("Libya", null)]
        [NUnit.Framework.TestCaseAttribute("Liechtenstein", null)]
        [NUnit.Framework.TestCaseAttribute("Lithuania", null)]
        [NUnit.Framework.TestCaseAttribute("Luxembourg", null)]
        [NUnit.Framework.TestCaseAttribute("Macao", null)]
        [NUnit.Framework.TestCaseAttribute("Macedonia, the former Yugoslav Republic of", null)]
        [NUnit.Framework.TestCaseAttribute("Madagascar", null)]
        [NUnit.Framework.TestCaseAttribute("Malawi", null)]
        [NUnit.Framework.TestCaseAttribute("Malaysia", null)]
        [NUnit.Framework.TestCaseAttribute("Maldives", null)]
        [NUnit.Framework.TestCaseAttribute("Mali", null)]
        [NUnit.Framework.TestCaseAttribute("Malta", null)]
        [NUnit.Framework.TestCaseAttribute("Marshall Islands", null)]
        [NUnit.Framework.TestCaseAttribute("Martinique", null)]
        [NUnit.Framework.TestCaseAttribute("Mauritania", null)]
        [NUnit.Framework.TestCaseAttribute("Mauritius", null)]
        [NUnit.Framework.TestCaseAttribute("Mayotte", null)]
        [NUnit.Framework.TestCaseAttribute("Mexico", null)]
        [NUnit.Framework.TestCaseAttribute("Micronesia, Federated States of", null)]
        [NUnit.Framework.TestCaseAttribute("Moldova, Republic of", null)]
        [NUnit.Framework.TestCaseAttribute("Monaco", null)]
        [NUnit.Framework.TestCaseAttribute("Mongolia", null)]
        [NUnit.Framework.TestCaseAttribute("Montenegro", null)]
        [NUnit.Framework.TestCaseAttribute("Montserrat", null)]
        [NUnit.Framework.TestCaseAttribute("Morocco", null)]
        [NUnit.Framework.TestCaseAttribute("Mozambique", null)]
        [NUnit.Framework.TestCaseAttribute("Myanmar", null)]
        [NUnit.Framework.TestCaseAttribute("Namibia", null)]
        [NUnit.Framework.TestCaseAttribute("Nauru", null)]
        [NUnit.Framework.TestCaseAttribute("Nepal", null)]
        [NUnit.Framework.TestCaseAttribute("Netherlands", null)]
        [NUnit.Framework.TestCaseAttribute("New Caledonia", null)]
        [NUnit.Framework.TestCaseAttribute("New Zealand", null)]
        [NUnit.Framework.TestCaseAttribute("Nicaragua", null)]
        [NUnit.Framework.TestCaseAttribute("Niger", null)]
        [NUnit.Framework.TestCaseAttribute("Nigeria", null)]
        [NUnit.Framework.TestCaseAttribute("Niue", null)]
        [NUnit.Framework.TestCaseAttribute("Norfolk Island", null)]
        [NUnit.Framework.TestCaseAttribute("Northern Mariana Islands", null)]
        [NUnit.Framework.TestCaseAttribute("Norway", null)]
        [NUnit.Framework.TestCaseAttribute("Oman", null)]
        [NUnit.Framework.TestCaseAttribute("Pakistan", null)]
        [NUnit.Framework.TestCaseAttribute("Palau", null)]
        [NUnit.Framework.TestCaseAttribute("Palestinian Territory, Occupied", null)]
        [NUnit.Framework.TestCaseAttribute("Panama", null)]
        [NUnit.Framework.TestCaseAttribute("Papua New Guinea", null)]
        [NUnit.Framework.TestCaseAttribute("Paraguay", null)]
        [NUnit.Framework.TestCaseAttribute("Peru", null)]
        [NUnit.Framework.TestCaseAttribute("Philippines", null)]
        [NUnit.Framework.TestCaseAttribute("Pitcairn", null)]
        [NUnit.Framework.TestCaseAttribute("Poland", null)]
        [NUnit.Framework.TestCaseAttribute("Portugal", null)]
        [NUnit.Framework.TestCaseAttribute("Puerto Rico", null)]
        [NUnit.Framework.TestCaseAttribute("Qatar", null)]
        [NUnit.Framework.TestCaseAttribute("Réunion", null)]
        [NUnit.Framework.TestCaseAttribute("Romania", null)]
        [NUnit.Framework.TestCaseAttribute("Russian Federation", null)]
        [NUnit.Framework.TestCaseAttribute("Rwanda", null)]
        [NUnit.Framework.TestCaseAttribute("Saint Barthélemy", null)]
        [NUnit.Framework.TestCaseAttribute("Saint Helena, Ascension and Tristan da Cunha", null)]
        [NUnit.Framework.TestCaseAttribute("Saint Kitts and Nevis", null)]
        [NUnit.Framework.TestCaseAttribute("Saint Lucia", null)]
        [NUnit.Framework.TestCaseAttribute("Saint Martin (French part)", null)]
        [NUnit.Framework.TestCaseAttribute("Saint Pierre and Miquelon", null)]
        [NUnit.Framework.TestCaseAttribute("Saint Vincent and the Grenadines", null)]
        [NUnit.Framework.TestCaseAttribute("Samoa", null)]
        [NUnit.Framework.TestCaseAttribute("San Marino", null)]
        [NUnit.Framework.TestCaseAttribute("Sao Tome and Principe", null)]
        [NUnit.Framework.TestCaseAttribute("Saudi Arabia", null)]
        [NUnit.Framework.TestCaseAttribute("Senegal", null)]
        [NUnit.Framework.TestCaseAttribute("Serbia", null)]
        [NUnit.Framework.TestCaseAttribute("Seychelles", null)]
        [NUnit.Framework.TestCaseAttribute("Sierra Leone", null)]
        [NUnit.Framework.TestCaseAttribute("Singapore", null)]
        [NUnit.Framework.TestCaseAttribute("Sint Maarten (Dutch part)", null)]
        [NUnit.Framework.TestCaseAttribute("Slovakia", null)]
        [NUnit.Framework.TestCaseAttribute("Slovenia", null)]
        [NUnit.Framework.TestCaseAttribute("Solomon Islands", null)]
        [NUnit.Framework.TestCaseAttribute("Somalia", null)]
        [NUnit.Framework.TestCaseAttribute("South Africa", null)]
        [NUnit.Framework.TestCaseAttribute("South Georgia and the South Sandwich Islands", null)]
        [NUnit.Framework.TestCaseAttribute("South Sudan", null)]
        [NUnit.Framework.TestCaseAttribute("Spain", null)]
        [NUnit.Framework.TestCaseAttribute("Sri Lanka", null)]
        [NUnit.Framework.TestCaseAttribute("Sudan", null)]
        [NUnit.Framework.TestCaseAttribute("Suriname", null)]
        [NUnit.Framework.TestCaseAttribute("Svalbard and Jan Mayen", null)]
        [NUnit.Framework.TestCaseAttribute("Swaziland", null)]
        [NUnit.Framework.TestCaseAttribute("Sweden", null)]
        [NUnit.Framework.TestCaseAttribute("Switzerland", null)]
        [NUnit.Framework.TestCaseAttribute("Syrian Arab Republic", null)]
        [NUnit.Framework.TestCaseAttribute("Taiwan, Province of China", null)]
        [NUnit.Framework.TestCaseAttribute("Tajikistan", null)]
        [NUnit.Framework.TestCaseAttribute("Tanzania, United Republic of", null)]
        [NUnit.Framework.TestCaseAttribute("Thailand", null)]
        [NUnit.Framework.TestCaseAttribute("Timor-Leste", null)]
        [NUnit.Framework.TestCaseAttribute("Togo", null)]
        [NUnit.Framework.TestCaseAttribute("Tokelau", null)]
        [NUnit.Framework.TestCaseAttribute("Tonga", null)]
        [NUnit.Framework.TestCaseAttribute("Trinidad and Tobago", null)]
        [NUnit.Framework.TestCaseAttribute("Tunisia", null)]
        [NUnit.Framework.TestCaseAttribute("Turkey", null)]
        [NUnit.Framework.TestCaseAttribute("Turkmenistan", null)]
        [NUnit.Framework.TestCaseAttribute("Turks and Caicos Islands", null)]
        [NUnit.Framework.TestCaseAttribute("Tuvalu", null)]
        [NUnit.Framework.TestCaseAttribute("Uganda", null)]
        [NUnit.Framework.TestCaseAttribute("Ukraine", null)]
        [NUnit.Framework.TestCaseAttribute("United Arab Emirates", null)]
        [NUnit.Framework.TestCaseAttribute("United Kingdom", null)]
        [NUnit.Framework.TestCaseAttribute("United States", null)]
        [NUnit.Framework.TestCaseAttribute("United States Minor Outlying Islands", null)]
        [NUnit.Framework.TestCaseAttribute("Uruguay", null)]
        [NUnit.Framework.TestCaseAttribute("Uzbekistan", null)]
        [NUnit.Framework.TestCaseAttribute("Vanuatu", null)]
        [NUnit.Framework.TestCaseAttribute("Venezuela, Bolivarian Republic of", null)]
        [NUnit.Framework.TestCaseAttribute("Viet Nam", null)]
        [NUnit.Framework.TestCaseAttribute("Virgin Islands, British", null)]
        [NUnit.Framework.TestCaseAttribute("Virgin Islands, U.S.", null)]
        [NUnit.Framework.TestCaseAttribute("Wallis and Futuna", null)]
        [NUnit.Framework.TestCaseAttribute("Western Sahara", null)]
        [NUnit.Framework.TestCaseAttribute("Yemen", null)]
        [NUnit.Framework.TestCaseAttribute("Zambia", null)]
        [NUnit.Framework.TestCaseAttribute("Zimbabwe", null)]
        [NUnit.Framework.TestCaseAttribute("Netherlands Antiles", null)]
        public virtual void Checkout_YourDetails_ShouldRegisterWithAnyCountry(string country, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tradefinancemagazine.com"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checkout - YourDetails - Should register with any country", @__tags);
#line 96
this.ScenarioSetup(scenarioInfo);
#line 97
 testRunner.Given("Given I\'ve selected basic subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 98
 testRunner.When("I register with new email", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 99
 testRunner.And(string.Format("I create a new account with any {0}", country), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
 testRunner.Then("I should subscribe successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Checkout - Should register with any allowed name")]
        [NUnit.Framework.CategoryAttribute("tradefinancemagazine.com")]
        [NUnit.Framework.TestCaseAttribute("John", "Smith", null)]
        [NUnit.Framework.TestCaseAttribute("sixty46C470FBA07993D61B46B54FA4F3CD444BA68AEAE0F0DCA197E04F6", "sixty46C470FBA07993D61B46B54FA4F3CD444BA68AEAE0F0DCA197E04F6", null)]
        [NUnit.Framework.TestCaseAttribute("Test-", "Test-", null)]
        [NUnit.Framework.TestCaseAttribute("Test.", "Test.", null)]
        [NUnit.Framework.TestCaseAttribute("Test/", "Test/", null)]
        [NUnit.Framework.TestCaseAttribute("Test+", "Test+", null)]
        [NUnit.Framework.TestCaseAttribute("Test,", "Test,", null)]
        [NUnit.Framework.TestCaseAttribute("Test:", "Test:", null)]
        [NUnit.Framework.TestCaseAttribute("Test@", "Test@", null)]
        [NUnit.Framework.TestCaseAttribute("Test?", "Test?", null)]
        [NUnit.Framework.TestCaseAttribute("Test(", "Test(", null)]
        [NUnit.Framework.TestCaseAttribute("Test)", "Test)", null)]
        [NUnit.Framework.TestCaseAttribute("Test!", "Test!", null)]
        [NUnit.Framework.TestCaseAttribute("Test\'", "Test\'", null)]
        [NUnit.Framework.TestCaseAttribute("Test\"", "Test\"", null)]
        [NUnit.Framework.TestCaseAttribute("Test&", "Test&", null)]
        [NUnit.Framework.TestCaseAttribute("Test0123456789", "Test0123456789", null)]
        [NUnit.Framework.TestCaseAttribute("qwertyuiopasdfghjklzxcvbnm", "qwertyuiopasdfghjklzxcvbnm", null)]
        [NUnit.Framework.TestCaseAttribute("G1ͰͱͲͳʹ͵Ͷͷͺͻͼͽ;", "ͰͱͲͳʹ͵Ͷͷͺͻͼͽ;", null)]
        [NUnit.Framework.TestCaseAttribute("G2B΄΅Ά·ΈΉΊΌΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟ", "΄΅Ά·ΈΉΊΌΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟ", null)]
        [NUnit.Framework.TestCaseAttribute("G3CΠΡΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξο", "ΠΡΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξο", null)]
        [NUnit.Framework.TestCaseAttribute("G4πρςστυφχψωϊϋόύώϏ", "πρςστυφχψωϊϋόύώϏ", null)]
        [NUnit.Framework.TestCaseAttribute("G5ϐϑϒϓϔϕϖϗϘϙϚϛϜϝϞϟ", "ϐϑϒϓϔϕϖϗϘϙϚϛϜϝϞϟ", null)]
        [NUnit.Framework.TestCaseAttribute("G6ϠϡϢϣϤϥϦϧϨϩϪϫϬϭϮϯ", "ϠϡϢϣϤϥϦϧϨϩϪϫϬϭϮϯ", null)]
        [NUnit.Framework.TestCaseAttribute("G7ϰϱϲϳϴϵ϶ϷϸϹϺϻϼϽϾϿ", "ϰϱϲϳϴϵ϶ϷϸϹϺϻϼϽϾϿ", null)]
        [NUnit.Framework.TestCaseAttribute("R1ЀЁЂЃЄЅІЇЈЉЊЋЌЍЎЏАБВГД", "ЀЁЂЃЄЅІЇЈЉЊЋЌЍЎЏАБВГД", null)]
        [NUnit.Framework.TestCaseAttribute("R2ЕЖЗИЙКЛМНОПРСТУФХ", "ЕЖЗИЙКЛМНОПРСТУФХ", null)]
        [NUnit.Framework.TestCaseAttribute("R3ЦЧШЩЪЫЬЭЮЯабвгде", "ЦЧШЩЪЫЬЭЮЯабвгде", null)]
        [NUnit.Framework.TestCaseAttribute("R4жзийклмнопрстуфхцчшщъ", "жзийклмнопрстуфхцчшщъ", null)]
        [NUnit.Framework.TestCaseAttribute("R5ыьэюяѐёђѓєѕіїјљњћќѝў", "ыьэюяѐёђѓєѕіїјљњћќѝў", null)]
        [NUnit.Framework.TestCaseAttribute("R6џѠѡѢѣѤѥѦѧѨѩѪѫѬѭ", "џѠѡѢѣѤѥѦѧѨѩѪѫѬѭ", null)]
        [NUnit.Framework.TestCaseAttribute("R7ѮѯѰѱѲѳѴѵѶѷѸѹѺѻ", "ѮѯѰѱѲѳѴѵѶѷѸѹѺѻ", null)]
        [NUnit.Framework.TestCaseAttribute("R8ѼѽѾѿҀҁ҂҃҄҅҆҇҈҉ҊҋҌҍҎҏ", "ѼѽѾѿҀҁ҂҃҄҅҆҇҈҉ҊҋҌҍҎҏ", null)]
        [NUnit.Framework.TestCaseAttribute("R9ҐґҒғҔҕҖҗҘҙҚқҜҝҞҟ", "ҐґҒғҔҕҖҗҘҙҚқҜҝҞҟ", null)]
        [NUnit.Framework.TestCaseAttribute("R10ҠҡҢңҤҥҦҧҨҩҪ", "ҠҡҢңҤҥҦҧҨҩҪ", null)]
        [NUnit.Framework.TestCaseAttribute("R11ҫҬҭҮүҰұҲҳҴҵҶҷҸ", "ҫҬҭҮүҰұҲҳҴҵҶҷҸ", null)]
        [NUnit.Framework.TestCaseAttribute("R12ҹҺһҼҽҾҿӀӁӂӃӄӅӆӇӈ", "ҹҺһҼҽҾҿӀӁӂӃӄӅӆӇӈ", null)]
        [NUnit.Framework.TestCaseAttribute("R13ӉӊӋӌӍӎӏӐӑӒӓӔӕӖӗӘә", "ӉӊӋӌӍӎӏӐӑӒӓӔӕӖӗӘә", null)]
        [NUnit.Framework.TestCaseAttribute("R14ӚӛӜӝӞӟӠӡӢӣӤӥӦӧ", "ӚӛӜӝӞӟӠӡӢӣӤӥӦӧ", null)]
        [NUnit.Framework.TestCaseAttribute("R15ӨөӪӫӬӭӮӯӰӱӲӳӴӵӶӷӸӹӺӻӼӽӾӿ", "ӨөӪӫӬӭӮӯӰӱӲӳӴӵӶӷӸӹӺӻӼӽӾӿ", null)]
        [NUnit.Framework.TestCaseAttribute("R16ԀԁԂԃԄԅԆԇԈԉԊԋԌԍԎԏԐԑԒԓԔԕԖ", "ԀԁԂԃԄԅԆԇԈԉԊԋԌԍԎԏԐԑԒԓԔԕԖ", null)]
        [NUnit.Framework.TestCaseAttribute("R17ԗԘԙԚԛԜԝԞԟԠԡԢԣԤԥ", "ԗԘԙԚԛԜԝԞԟԠԡԢԣԤԥ", null)]
        [NUnit.Framework.TestCaseAttribute("L1ÑÒÓÔÕÖ×ØÙÚÛÜÝÞß", "ÑÒÓÔÕÖ×ØÙÚÛÜÝÞß", null)]
        [NUnit.Framework.TestCaseAttribute("L2àáâãäåæçèéêëìíîï", "àáâãäåæçèéêëìíîï", null)]
        [NUnit.Framework.TestCaseAttribute("L3ðñòóôõö÷øùúûüýþÿĀ", "ðñòóôõö÷øùúûüýþÿĀ", null)]
        [NUnit.Framework.TestCaseAttribute("L4āĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕ", "āĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕ", null)]
        [NUnit.Framework.TestCaseAttribute("L5ĖėĘęĚěĜĝĞğĠġĢģĤĥ", "ĖėĘęĚěĜĝĞğĠġĢģĤĥ", null)]
        [NUnit.Framework.TestCaseAttribute("L6ĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķ", "ĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķ", null)]
        [NUnit.Framework.TestCaseAttribute("L7ĸĹĺĻļĽľĿŀŁłŃńŅņŇ", "ĸĹĺĻļĽľĿŀŁłŃńŅņŇ", null)]
        [NUnit.Framework.TestCaseAttribute("L8ňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘř", "ňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘř", null)]
        [NUnit.Framework.TestCaseAttribute("L9ŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬ", "ŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬ", null)]
        [NUnit.Framework.TestCaseAttribute("L10ŭŮůŰűŲųŴŵŶŷŸŹźŻżŽž", "ŭŮůŰűŲųŴŵŶŷŸŹźŻżŽž", null)]
        public virtual void Checkout_ShouldRegisterWithAnyAllowedName(string firstName, string lastName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tradefinancemagazine.com"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checkout - Should register with any allowed name", @__tags);
#line 355
this.ScenarioSetup(scenarioInfo);
#line 356
  testRunner.Given("Given I\'ve selected basic subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 357
  testRunner.When("I register with new email", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 358
  testRunner.And(string.Format("I create a new account with allowed name {0} and {1}", firstName, lastName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 359
  testRunner.Then("I should subscribe successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Checkout - Should register with any allowed company name")]
        [NUnit.Framework.CategoryAttribute("tradefinancemagazine.com")]
        [NUnit.Framework.TestCaseAttribute("Testers Corp", null)]
        [NUnit.Framework.TestCaseAttribute("fourtyB54FA4F3CD444BA68AEAE0F0DCA197E04F", null)]
        [NUnit.Framework.TestCaseAttribute("1 corp", null)]
        [NUnit.Framework.TestCaseAttribute("Test-", null)]
        [NUnit.Framework.TestCaseAttribute("Test.", null)]
        [NUnit.Framework.TestCaseAttribute("Test/", null)]
        [NUnit.Framework.TestCaseAttribute("Test+", null)]
        [NUnit.Framework.TestCaseAttribute("Test,", null)]
        [NUnit.Framework.TestCaseAttribute("Test:", null)]
        [NUnit.Framework.TestCaseAttribute("Test@", null)]
        [NUnit.Framework.TestCaseAttribute("Test?", null)]
        [NUnit.Framework.TestCaseAttribute("Test(", null)]
        [NUnit.Framework.TestCaseAttribute("Test)", null)]
        [NUnit.Framework.TestCaseAttribute("Test!", null)]
        [NUnit.Framework.TestCaseAttribute("Test\'", null)]
        [NUnit.Framework.TestCaseAttribute("Test\"", null)]
        [NUnit.Framework.TestCaseAttribute("Test&", null)]
        [NUnit.Framework.TestCaseAttribute("Test0123456789", null)]
        [NUnit.Framework.TestCaseAttribute("qwertyuiopasdfghjklzxcvbnm", null)]
        [NUnit.Framework.TestCaseAttribute("G1ͰͱͲͳʹ͵Ͷͷͺͻͼͽ;", null)]
        [NUnit.Framework.TestCaseAttribute("G2B΄΅Ά·ΈΉΊΌΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟ", null)]
        [NUnit.Framework.TestCaseAttribute("G3CΠΡΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξο", null)]
        [NUnit.Framework.TestCaseAttribute("G4πρςστυφχψωϊϋόύώϏ", null)]
        [NUnit.Framework.TestCaseAttribute("G5ϐϑϒϓϔϕϖϗϘϙϚϛϜϝϞϟ", null)]
        [NUnit.Framework.TestCaseAttribute("G6ϠϡϢϣϤϥϦϧϨϩϪϫϬϭϮϯ", null)]
        [NUnit.Framework.TestCaseAttribute("G7ϰϱϲϳϴϵ϶ϷϸϹϺϻϼϽϾϿ", null)]
        [NUnit.Framework.TestCaseAttribute("R1ЀЁЂЃЄЅІЇЈЉЊЋЌЍЎЏАБВГД", null)]
        [NUnit.Framework.TestCaseAttribute("R2ЕЖЗИЙКЛМНОПРСТУФХ", null)]
        [NUnit.Framework.TestCaseAttribute("R3ЦЧШЩЪЫЬЭЮЯабвгде", null)]
        [NUnit.Framework.TestCaseAttribute("R4жзийклмнопрстуфхцчшщъ", null)]
        [NUnit.Framework.TestCaseAttribute("R5ыьэюяѐёђѓєѕіїјљњћќѝў", null)]
        [NUnit.Framework.TestCaseAttribute("R6џѠѡѢѣѤѥѦѧѨѩѪѫѬѭ", null)]
        [NUnit.Framework.TestCaseAttribute("R7ѮѯѰѱѲѳѴѵѶѷѸѹѺѻ", null)]
        [NUnit.Framework.TestCaseAttribute("R8ѼѽѾѿҀҁ҂҃҄҅҆҇҈҉ҊҋҌҍҎҏ", null)]
        [NUnit.Framework.TestCaseAttribute("R9ҐґҒғҔҕҖҗҘҙҚқҜҝҞҟ", null)]
        [NUnit.Framework.TestCaseAttribute("R10ҠҡҢңҤҥҦҧҨҩҪ", null)]
        [NUnit.Framework.TestCaseAttribute("R11ҫҬҭҮүҰұҲҳҴҵҶҷҸ", null)]
        [NUnit.Framework.TestCaseAttribute("R12ҹҺһҼҽҾҿӀӁӂӃӄӅӆӇӈ", null)]
        [NUnit.Framework.TestCaseAttribute("R13ӉӊӋӌӍӎӏӐӑӒӓӔӕӖӗӘә", null)]
        [NUnit.Framework.TestCaseAttribute("R14ӚӛӜӝӞӟӠӡӢӣӤӥӦӧ", null)]
        [NUnit.Framework.TestCaseAttribute("R15ӨөӪӫӬӭӮӯӰӱӲӳӴӵӶӷӸӹӺӻӼӽӾӿ", null)]
        [NUnit.Framework.TestCaseAttribute("R16ԀԁԂԃԄԅԆԇԈԉԊԋԌԍԎԏԐԑԒԓԔԕԖ", null)]
        [NUnit.Framework.TestCaseAttribute("R17ԗԘԙԚԛԜԝԞԟԠԡԢԣԤԥ", null)]
        [NUnit.Framework.TestCaseAttribute("L1ÑÒÓÔÕÖ×ØÙÚÛÜÝÞß", null)]
        [NUnit.Framework.TestCaseAttribute("L2àáâãäåæçèéêëìíîï", null)]
        [NUnit.Framework.TestCaseAttribute("L3ðñòóôõö÷øùúûüýþÿĀ", null)]
        [NUnit.Framework.TestCaseAttribute("L4āĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕ", null)]
        [NUnit.Framework.TestCaseAttribute("L5ĖėĘęĚěĜĝĞğĠġĢģĤĥ", null)]
        [NUnit.Framework.TestCaseAttribute("L6ĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķ", null)]
        [NUnit.Framework.TestCaseAttribute("L7ĸĹĺĻļĽľĿŀŁłŃńŅņŇ", null)]
        [NUnit.Framework.TestCaseAttribute("L8ňŉŊŋŌōŎŏŐőŒœŔŕŖŗŘř", null)]
        [NUnit.Framework.TestCaseAttribute("L9ŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬ", null)]
        [NUnit.Framework.TestCaseAttribute("L10ŭŮůŰűŲųŴŵŶŷŸŹźŻżŽž", null)]
        public virtual void Checkout_ShouldRegisterWithAnyAllowedCompanyName(string companyName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tradefinancemagazine.com"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checkout - Should register with any allowed company name", @__tags);
#line 416
this.ScenarioSetup(scenarioInfo);
#line 417
  testRunner.Given("Given I\'ve selected basic subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 418
  testRunner.When("I register with new email", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 419
  testRunner.And(string.Format("I create a new accout with allowed company name {0}", companyName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 420
  testRunner.Then("I should subscribe successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Checkout - Should register with any allowed adresses")]
        [NUnit.Framework.CategoryAttribute("tradefinancemagazine.com")]
        [NUnit.Framework.TestCaseAttribute("Tester Street 5", "Some alley 3", "Shady place  45", null)]
        [NUnit.Framework.TestCaseAttribute("Test address", "Some more", "", null)]
        [NUnit.Framework.TestCaseAttribute("Test address", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("qwertyuiopasdfghjklzxcvbnm", "qwertyuiopasdfghjklzxcvbnm", "qwertyuiopasdfghjklzxcvbnm", null)]
        [NUnit.Framework.TestCaseAttribute("0123456789", "0123456789", "0123456789", null)]
        [NUnit.Framework.TestCaseAttribute("sixty46C470FBA07993D61B46B54FA4F3CD444BA68AEAE0F0DCA197E04F6", "sixty46C470FBA07993D61B46B54FA4F3CD444BA68AEAE0F0DCA197E04F6", "sixty46C470FBA07993D61B46B54FA4F3CD444BA68AEAE0F0DCA197E04F6", null)]
        [NUnit.Framework.TestCaseAttribute("First and third  122/33", "", "Test", null)]
        [NUnit.Framework.TestCaseAttribute("Test address ! \"", "Test address ! \"", "Test address ! \"", null)]
        [NUnit.Framework.TestCaseAttribute("Test address #$%", "Test address #$%", "Test address #$%", null)]
        [NUnit.Framework.TestCaseAttribute("Test address &\'(", "Test address &\'(", "Test address &\'(", null)]
        [NUnit.Framework.TestCaseAttribute("Test address )*+", "Test address )*+", "Test address )*+", null)]
        [NUnit.Framework.TestCaseAttribute("Test address ,-.", "Test address ,-.", "Test address ,-.", null)]
        [NUnit.Framework.TestCaseAttribute("Test address /:;", "Test address /:;", "Test address /:;", null)]
        [NUnit.Framework.TestCaseAttribute("Test address =?@", "Test address =?@", "Test address =?@", null)]
        [NUnit.Framework.TestCaseAttribute("Test address ^_~", "Test address ^_~", "Test address ^_~", null)]
        [NUnit.Framework.TestCaseAttribute("All1ÂØĆŶǦʧΗϤУҦӘӂՆնפ", "ÂØĆŶǦʧΗϤУҦӘӂՆնפ", "ÂØĆŶǦʧΗϤУҦӘӂՆնפ", null)]
        [NUnit.Framework.TestCaseAttribute("All2אطڅڼݕޙइ२ਘચಗಸനวดབႤ", "אطڅڼݕޙइ२ਘચಗಸനวดབႤ", "אطڅڼݕޙइ२ਘચಗಸനวดབႤ", null)]
        [NUnit.Framework.TestCaseAttribute("All3ሥណᡵᥔẶ⿇ざㅦ㈱㌕㒃", "ሥណᡵᥔẶ⿇ざㅦ㈱㌕㒃", "ሥណᡵᥔẶ⿇ざㅦ㈱㌕㒃", null)]
        [NUnit.Framework.TestCaseAttribute("All4㒩㞖䃇䩗亓冕另寸懇柷", "㒩㞖䃇䩗亓冕另寸懇柷", "㒩㞖䃇䩗亓冕另寸懇柷", null)]
        public virtual void Checkout_ShouldRegisterWithAnyAllowedAdresses(string addressOne, string addressTwo, string addressThree, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tradefinancemagazine.com"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checkout - Should register with any allowed adresses", @__tags);
#line 478
this.ScenarioSetup(scenarioInfo);
#line 479
  testRunner.Given("Given I\'ve selected basic subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 480
  testRunner.When("I register with new email", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 481
  testRunner.And(string.Format("I create a new accout with allowed addresses {0} and {1} and {2}", addressOne, addressTwo, addressThree), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 482
  testRunner.Then("I should subscribe successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Checkout - Should register with any allowed city")]
        [NUnit.Framework.CategoryAttribute("tradefinancemagazine.com")]
        [NUnit.Framework.TestCaseAttribute("Warsaw", null)]
        [NUnit.Framework.TestCaseAttribute("0123456789", null)]
        [NUnit.Framework.TestCaseAttribute("fifty46C470FBA07993D61B46B54FA4F3CD444BA68AEAE0F0D", null)]
        [NUnit.Framework.TestCaseAttribute("City ! \"", null)]
        [NUnit.Framework.TestCaseAttribute("City #$%", null)]
        [NUnit.Framework.TestCaseAttribute("City &\'(", null)]
        [NUnit.Framework.TestCaseAttribute("City )*+", null)]
        [NUnit.Framework.TestCaseAttribute("City ,-.", null)]
        [NUnit.Framework.TestCaseAttribute("City /:;", null)]
        [NUnit.Framework.TestCaseAttribute("City =?@", null)]
        [NUnit.Framework.TestCaseAttribute("City ^_~", null)]
        [NUnit.Framework.TestCaseAttribute("All1ÂØĆŶǦʧΗϤУҦӘӂՆնפ", null)]
        [NUnit.Framework.TestCaseAttribute("All2אطڅڼݕޙइ२ਘચಗಸനวดབႤ", null)]
        [NUnit.Framework.TestCaseAttribute("All3ሥណᡵᥔẶ⿇ざㅦ㈱㌕㒃", null)]
        [NUnit.Framework.TestCaseAttribute("All4㒩㞖䃇䩗亓冕另寸懇柷", null)]
        public virtual void Checkout_ShouldRegisterWithAnyAllowedCity(string city, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tradefinancemagazine.com"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checkout - Should register with any allowed city", @__tags);
#line 506
this.ScenarioSetup(scenarioInfo);
#line 507
  testRunner.Given("Given I\'ve selected basic subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 508
  testRunner.When("I register with new email", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 509
  testRunner.And(string.Format("I create a new accout with allowed city value {0}", city), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 510
  testRunner.Then("I should subscribe successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Checkout - Should register with any allowed county")]
        [NUnit.Framework.CategoryAttribute("tradefinancemagazine.com")]
        [NUnit.Framework.TestCaseAttribute("Some county", null)]
        [NUnit.Framework.TestCaseAttribute("0123456789", null)]
        [NUnit.Framework.TestCaseAttribute("fifty46C470FBA07993D61B46B54FA4F3CD444BA68AEAE0F0D", null)]
        [NUnit.Framework.TestCaseAttribute("County ! \"", null)]
        [NUnit.Framework.TestCaseAttribute("County #$%", null)]
        [NUnit.Framework.TestCaseAttribute("County &\'(", null)]
        [NUnit.Framework.TestCaseAttribute("County )*+", null)]
        [NUnit.Framework.TestCaseAttribute("County ,-.", null)]
        [NUnit.Framework.TestCaseAttribute("County /:;", null)]
        [NUnit.Framework.TestCaseAttribute("County =?@", null)]
        [NUnit.Framework.TestCaseAttribute("County ^_~", null)]
        [NUnit.Framework.TestCaseAttribute("All1ÂØĆŶǦʧΗϤУҦӘӂՆնפ", null)]
        [NUnit.Framework.TestCaseAttribute("All2אطڅڼݕޙइ२ਘચಗಸനวดབႤ", null)]
        [NUnit.Framework.TestCaseAttribute("All3ሥណᡵᥔẶ⿇ざㅦ㈱㌕㒃", null)]
        [NUnit.Framework.TestCaseAttribute("All4㒩㞖䃇䩗亓冕另寸懇柷", null)]
        public virtual void Checkout_ShouldRegisterWithAnyAllowedCounty(string county, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tradefinancemagazine.com"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checkout - Should register with any allowed county", @__tags);
#line 530
this.ScenarioSetup(scenarioInfo);
#line 531
  testRunner.Given("Given I\'ve selected basic subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 532
  testRunner.When("I register with new email", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 533
  testRunner.And(string.Format("I create a new accout with allowed county value {0}", county), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 534
  testRunner.Then("I should subscribe successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Checkout - Should register with any allowed fax")]
        [NUnit.Framework.CategoryAttribute("tradefinancemagazine.com")]
        [NUnit.Framework.TestCaseAttribute("0123456789", null)]
        [NUnit.Framework.TestCaseAttribute("fifty46C470FBA07993D61B46B54FA4F3CD444BA68AEAE0F0D", null)]
        [NUnit.Framework.TestCaseAttribute("Fax ! \"", null)]
        [NUnit.Framework.TestCaseAttribute("Fax #$%", null)]
        [NUnit.Framework.TestCaseAttribute("Fax &\'(", null)]
        [NUnit.Framework.TestCaseAttribute("Fax )*+", null)]
        [NUnit.Framework.TestCaseAttribute("Fax ,-.", null)]
        [NUnit.Framework.TestCaseAttribute("Fax /:;", null)]
        [NUnit.Framework.TestCaseAttribute("Fax =?@", null)]
        [NUnit.Framework.TestCaseAttribute("Fax ^_~", null)]
        [NUnit.Framework.TestCaseAttribute("All1ÂØĆŶǦʧΗϤУҦӘӂՆնפ", null)]
        [NUnit.Framework.TestCaseAttribute("All2אطڅڼݕޙइ२ਘચಗಸനวดབႤ", null)]
        [NUnit.Framework.TestCaseAttribute("All3ሥណᡵᥔẶ⿇ざㅦ㈱㌕㒃", null)]
        [NUnit.Framework.TestCaseAttribute("All4㒩㞖䃇䩗亓冕另寸懇柷", null)]
        public virtual void Checkout_ShouldRegisterWithAnyAllowedFax(string fax, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tradefinancemagazine.com"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checkout - Should register with any allowed fax", @__tags);
#line 554
this.ScenarioSetup(scenarioInfo);
#line 555
  testRunner.Given("Given I\'ve selected basic subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 556
  testRunner.When("I register with new email", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 557
  testRunner.And(string.Format("I create a new accout with allowed fax value {0}", fax), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 558
  testRunner.Then("I should subscribe successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Checkout - Should register with any allowed zip")]
        [NUnit.Framework.CategoryAttribute("tradefinancemagazine.com")]
        [NUnit.Framework.TestCaseAttribute("0123456789", null)]
        [NUnit.Framework.TestCaseAttribute("ten0123456", null)]
        [NUnit.Framework.TestCaseAttribute("Fax ! \"", null)]
        [NUnit.Framework.TestCaseAttribute("Fax #$%", null)]
        [NUnit.Framework.TestCaseAttribute("Fax &\'(", null)]
        [NUnit.Framework.TestCaseAttribute("Fax )*+", null)]
        [NUnit.Framework.TestCaseAttribute("Fax ,-.", null)]
        [NUnit.Framework.TestCaseAttribute("Fax /:;", null)]
        [NUnit.Framework.TestCaseAttribute("Fax =?@", null)]
        [NUnit.Framework.TestCaseAttribute("Fax ^_~", null)]
        [NUnit.Framework.TestCaseAttribute("All1ÂØĆŶǦʧΗϤУҦӘӂՆնפ", null)]
        [NUnit.Framework.TestCaseAttribute("All2אطڅڼݕޙइ२ਘચಗಸനวดབႤ", null)]
        [NUnit.Framework.TestCaseAttribute("All3ሥណᡵᥔẶ⿇ざㅦ㈱㌕㒃", null)]
        [NUnit.Framework.TestCaseAttribute("All4㒩㞖䃇䩗亓冕另寸懇柷", null)]
        public virtual void Checkout_ShouldRegisterWithAnyAllowedZip(string zip, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tradefinancemagazine.com"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checkout - Should register with any allowed zip", @__tags);
#line 577
this.ScenarioSetup(scenarioInfo);
#line 578
  testRunner.Given("Given I\'ve selected basic subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 579
  testRunner.When("I register with new email", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 580
  testRunner.And(string.Format("I create a new accout with allowed zip value {0}", zip), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 581
  testRunner.Then("I should subscribe successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Checkout - Should register with any allowed telephone number")]
        [NUnit.Framework.CategoryAttribute("tradefinancemagazine.com")]
        [NUnit.Framework.TestCaseAttribute("0123456789", null)]
        [NUnit.Framework.TestCaseAttribute("fifteen01234567", null)]
        [NUnit.Framework.TestCaseAttribute("Test telepho #", null)]
        [NUnit.Framework.TestCaseAttribute("Test telepho", null)]
        [NUnit.Framework.TestCaseAttribute("Test telepho *", null)]
        [NUnit.Framework.TestCaseAttribute("Test telepho (", null)]
        [NUnit.Framework.TestCaseAttribute("Test telepho )", null)]
        [NUnit.Framework.TestCaseAttribute("Test telepho -", null)]
        [NUnit.Framework.TestCaseAttribute("Test telepho +", null)]
        [NUnit.Framework.TestCaseAttribute("Test telepho ,", null)]
        [NUnit.Framework.TestCaseAttribute("Test telepho .", null)]
        [NUnit.Framework.TestCaseAttribute("12-34-56", null)]
        [NUnit.Framework.TestCaseAttribute("+48(32)123456", null)]
        public virtual void Checkout_ShouldRegisterWithAnyAllowedTelephoneNumber(string telephone, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tradefinancemagazine.com"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checkout - Should register with any allowed telephone number", @__tags);
#line 600
this.ScenarioSetup(scenarioInfo);
#line 601
  testRunner.Given("Given I\'ve selected basic subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 602
  testRunner.When("I register with new email", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 603
  testRunner.And(string.Format("I create a new accout with allowed telephone number value {0}", telephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 604
  testRunner.Then("I should subscribe successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Checkout - Should not register when invalid first name entered")]
        [NUnit.Framework.TestCaseAttribute("1ShouldFail", null)]
        public virtual void Checkout_ShouldNotRegisterWhenInvalidFirstNameEntered(string firstName, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checkout - Should not register when invalid first name entered", exampleTags);
#line 621
this.ScenarioSetup(scenarioInfo);
#line 622
  testRunner.Given("Given I\'ve selected basic subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 623
  testRunner.When("I register with new email", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 624
  testRunner.And(string.Format("I create a new accout with invalid first name {0}", firstName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 625
  testRunner.Then("I should stay at your details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 626
  testRunner.And("First name is invalid validation message should be displayed.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
