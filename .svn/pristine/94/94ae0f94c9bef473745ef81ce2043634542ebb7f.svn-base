<#@ template language="C#" hostspecific="true" debug="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" 
#><#@ assembly name="System.Xml" 
#><#@ import namespace="System.Linq" 
#><#@ import namespace="System.IO" 
#><#@ import namespace="System.Text" 
#><#@ import namespace="System.Reflection" 
#><#@ import namespace="System.Xml" 
#><#@include file="T4Manager.ttinclude"
#>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<#
	GenerateControls.Host = Host;
	GenerateControls.Doc = new XmlDocument();
	GenerateControls.FileContent = new StreamReader(new DirectoryInfo(Host.ResolvePath(string.Empty)).Parent.FullName.ToString()+"\\Bin\\Debug\\GeneratedControls\\PageControls.xml").ReadToEnd();
	GenerateControls.Doc.LoadXml(GenerateControls.FileContent);
#>
<# for (int pageIterator = 1; pageIterator<= GenerateControls.NumberOfPages(); pageIterator++) { #>	
<# manager.StartNewFile(GenerateControls.PageName(pageIterator)+".cs"); #>
// -----------------------------------------------------------------------
// <copyright file="<#= GenerateControls.PageName(pageIterator) #>.cs" company="Euromoney">
// TODO: Update copyright text.
// </copyright>
// <auto-generated />
// -----------------------------------------------------------------------
namespace PageObjects.PageObjects
{
	using System.Collections.Generic;
	using System.Globalization;
	using Core;
	using Core.Controls;
	using Core.Configuration;
	using ConfigManager;

	/// <summary> 
	/// Initializes a new instance of the <#= GenerateControls.PageName(pageIterator) #> class
	/// </summary>
	public partial class <#= GenerateControls.PageName(pageIterator) #> 
	{	
		public <#= GenerateControls.PageName(pageIterator) #>(bool optional=false)
		{
			this.Optional = optional;
		}

<# for (int pageControlIterator = 1; pageControlIterator<= GenerateControls.NumberOfControls(pageIterator); pageControlIterator++) { #>

		/// <summary>
		/// Gets <#= GenerateControls.ControlName(pageIterator, pageControlIterator) #> <#= GenerateControls.ControlType(pageIterator, pageControlIterator) #>
		/// </summary><# if (!GenerateControls.ControlIsAList(pageIterator, pageControlIterator)) { #> 
		<#= GenerateControls.ControlAccess(pageIterator, pageControlIterator) #> <#= GenerateControls.ControlType(pageIterator, pageControlIterator) #> <#= GenerateControls.ControlName(pageIterator, pageControlIterator) #>
		{
			get { return new <#= GenerateControls.ControlType(pageIterator, pageControlIterator) #>(<#= GenerateControls.PageComponentOptional(pageIterator, pageControlIterator) #><# if (!string.IsNullOrEmpty(GenerateControls.ControlXPath(pageIterator, pageControlIterator))) { #>"<#= GenerateControls.ControlName(pageIterator, pageControlIterator) #>", "<#= GenerateControls.ControlXPath(pageIterator, pageControlIterator) #>", <#= GenerateControls.ControlTimeout(pageIterator, pageControlIterator) #>, <#= GenerateControls.ControlOptional(pageIterator, pageControlIterator) #><# } #>); }
		}
<# }
		else 
		{ #>
		<#= GenerateControls.ControlAccess(pageIterator, pageControlIterator) #> List<<#= GenerateControls.ListElementType(pageIterator, pageControlIterator) #>> List
		{
			get
			{
				List<<#= GenerateControls.ListElementType(pageIterator, pageControlIterator) #>> tempList = new List<<#= GenerateControls.ListElementType(pageIterator, pageControlIterator) #>>();
				int numberOfElements = BasicHelper.CountElements("<#= GenerateControls.ControlXPath(pageIterator, pageControlIterator) #>");
								
				for (int i = 1; i <= numberOfElements; i++)
				{
					tempList.Add(new <#= GenerateControls.ListElementType(pageIterator, pageControlIterator) #>("<#= GenerateControls.ControlName(pageIterator, pageControlIterator) #>", string.Format("{0}[{1}]", "<#= GenerateControls.ControlXPath(pageIterator, pageControlIterator) #>", i), "<#= GenerateControls.ControlTimeout(pageIterator, pageControlIterator) #>, <#= GenerateControls.ControlOptional(pageIterator, pageControlIterator) #>"));
				}

				return tempList;
			}
		}
<# } #>
<# } #>

<# for (int requiredListsIterator = 1; requiredListsIterator<= GenerateControls.NumberOfRequiredLists(pageIterator); requiredListsIterator++) { #>
		/// <summary>
		/// Gets <#= GenerateControls.ListName(pageIterator, requiredListsIterator) #> list
		/// </summary>
		public RequiredElements <#= GenerateControls.ListName(pageIterator, requiredListsIterator) #>
		{
			get
			{
				return new RequiredElements
				{
					Name = "<#= GenerateControls.ListName(pageIterator, requiredListsIterator) #>",
					Xpath = "<#= GenerateControls.ListXPath(pageIterator, requiredListsIterator) #>",
					Filter = "<#= GenerateControls.ListFilter(pageIterator, requiredListsIterator) #>",
					Optional = <#= GenerateControls.ListOptional(pageIterator, requiredListsIterator) #>,
					List = new List<Element>
					{
						<# for (int requiredIterator = 1; requiredIterator <= GenerateControls.NumberOfRequiredElements(pageIterator, requiredListsIterator); requiredIterator++) 
						{ #>new Element
						{
							Name = "<#= GenerateControls.RequiredName(pageIterator, requiredListsIterator, requiredIterator) #>",
							Type = "<#= GenerateControls.RequiredType(pageIterator, requiredListsIterator, requiredIterator) #>",
							Attributes = new Dictionary<string, string>
							{
								<# for (int attributeId = 1; attributeId <= GenerateControls.NumberOfAttributes(pageIterator, requiredListsIterator, requiredIterator); attributeId++) 
								{ #>{"<#= GenerateControls.AttributeName(pageIterator, requiredListsIterator, requiredIterator, attributeId) #>","<#= GenerateControls.AttributeType(pageIterator, requiredListsIterator, requiredIterator, attributeId) #>"}<# if (attributeId != GenerateControls.NumberOfAttributes(pageIterator, requiredListsIterator, requiredIterator)) { #><#= "," #>
								<# } #><# } #>

							}
						}<# if (requiredIterator != GenerateControls.NumberOfRequiredElements(pageIterator, requiredListsIterator)) { #><#= ", " #><# } #>
<# } #>

					}
				};
			}
		}

<# } #>	}
}
<#} #>
<# manager.Process(true); #>
<#+ 
public class GenerateControls
{
	public static ITextTemplatingEngineHost Host { get; set; }

	public static string FileContent { get; set; }

	public static XmlDocument Doc { get; set; }

	public static int NumberOfPages()
	{
		return Doc.SelectNodes("//Pages/Page").Count;
	}

	public static string PageName(int pageId)
	{
		return Doc.SelectSingleNode(string.Format("//Pages/Page[{0}]", pageId)).Attributes["name"].Value;
	}

	public static string PageComponentOptional(int pageId, int controlId)
	{
		XmlAttribute attribute = Doc.SelectSingleNode(string.Format("//Pages/Page[{0}]/Control[{1}]", pageId, controlId)).Attributes["optionalComponent"];
		

		if (attribute != null)
		{
			return attribute.Value;
		}
		else
		{
			return "";
		}
	}

	public static int NumberOfControls(int pageId)
	{
		return Doc.SelectNodes(string.Format("//Pages/Page[{0}]/Control", pageId)).Count;
	}

	public static string ControlName(int pageId, int controlId)
	{
		return Doc.SelectSingleNode(string.Format("//Pages/Page[{0}]/Control[{1}]", pageId, controlId)).Attributes["name"].Value;
	}

	public static string ControlType(int pageId, int controlId)
	{
		return Doc.SelectSingleNode(string.Format("//Pages/Page[{0}]/Control[{1}]", pageId, controlId)).Attributes["type"].Value;
	}

	public static string ControlAccess(int pageId, int controlId)
	{
		XmlAttribute attribute = Doc.SelectSingleNode(string.Format("//Pages/Page[{0}]/Control[{1}]", pageId, controlId)).Attributes["access"];
		if (attribute != null)
		{
			return attribute.Value;
		}
		else
		{
			return "private";
		}	
	}

	public static string ControlXPath(int pageId, int controlId)
	{
		return Doc.SelectSingleNode(string.Format("//Pages/Page[{0}]/Control[{1}]", pageId, controlId)).Attributes["xpath"].Value;
	}

	public static int ControlTimeout(int pageId, int controlId)
	{
		XmlAttribute attribute = Doc.SelectSingleNode(string.Format("//Pages/Page[{0}]/Control[{1}]", pageId, controlId)).Attributes["timeout"];
		if (attribute != null)
		{
			return int.Parse(attribute.Value);
		}
		else
		{
			return 0;
		}	
	}

		public static string ControlOptional(int pageId, int controlId)
	{
		XmlAttribute attribute = Doc.SelectSingleNode(string.Format("//Pages/Page[{0}]/Control[{1}]", pageId, controlId)).Attributes["optional"];
		if (attribute != null)
		{
			return attribute.Value;
		}
		else
		{
			return "false";
		}	
	}

	public static bool ControlIsAList(int pageId, int controlId)
	{
		return Doc.SelectSingleNode(string.Format("//Pages/Page[{0}]/Control[{1}]", pageId, controlId)).ChildNodes.Count > 0;
	}

	public static string ListElementType(int pageId, int controlId)
	{
		if (ControlIsAList(pageId, controlId))
		{
			return Doc.SelectSingleNode(string.Format("//Pages/Page[{0}]/Control[{1}]", pageId, controlId)).ChildNodes[0].Attributes["type"].Value;
		} 
		else
		{
			return string.Empty;
		}
	}

	public static int NumberOfRequiredLists(int pageId)
	{
		return Doc.SelectNodes(string.Format("//Pages/Page[{0}]/RequiredElements", pageId)).Count;
	}

	public static string ListName(int pageId, int listId)
	{
		return Doc.SelectSingleNode(string.Format("//Pages/Page[{0}]/RequiredElements[{1}]", pageId, listId)).Attributes["name"].Value;
	}

	public static string ListXPath(int pageId, int listId)
	{
		return Doc.SelectSingleNode(string.Format("//Pages/Page[{0}]/RequiredElements[{1}]", pageId, listId)).Attributes["xpath"].Value;
	}

	public static string ListFilter(int pageId, int listId)
	{
		return Doc.SelectSingleNode(string.Format("//Pages/Page[{0}]/RequiredElements[{1}]", pageId, listId)).Attributes["filter"].Value;
	}

	public static string ListOptional(int pageId, int listId)
	{
		XmlAttribute attribute = Doc.SelectSingleNode(string.Format("//Pages/Page[{0}]/RequiredElements[{1}]", pageId, listId)).Attributes["optional"];
		if (attribute != null)
		{
			return attribute.Value;
		}
		else
		{
			return "false";
		}	
	}

	public static int NumberOfRequiredElements(int pageId, int listId)
	{
		return Doc.SelectNodes(string.Format("//Pages/Page[{0}]/RequiredElements[{1}]/Element", pageId, listId)).Count;
	}

	public static string RequiredName(int pageId, int listId, int elementId)
	{
		return Doc.SelectSingleNode(string.Format("//Pages/Page[{0}]/RequiredElements[{1}]/Element[{2}]", pageId, listId, elementId)).Attributes["name"].Value;
	}

	public static string RequiredType(int pageId,int listId, int elementId)
	{
		return Doc.SelectSingleNode(string.Format("//Pages/Page[{0}]/RequiredElements[{1}]/Element[{2}]", pageId, listId, elementId)).Attributes["type"].Value;
	}

	public static int NumberOfAttributes(int pageId, int listId, int elementId)
	{
		return Doc.SelectNodes(string.Format("//Pages/Page[{0}]/RequiredElements[{1}]/Element[{2}]/Attribute", pageId, listId, elementId)).Count;
	}

	public static string AttributeName(int pageId,int listId, int elementId, int attributeId)
	{
		return Doc.SelectSingleNode(string.Format("//Pages/Page[{0}]/RequiredElements[{1}]/Element[{2}]/Attribute[{3}]", pageId, listId, elementId, attributeId)).Attributes["name"].Value;
	}

	public static string AttributeType(int pageId,int listId, int elementId, int attributeId)
	{
		return Doc.SelectSingleNode(string.Format("//Pages/Page[{0}]/RequiredElements[{1}]/Element[{2}]/Attribute[{3}]", pageId, listId, elementId, attributeId)).Attributes["value"].Value;
	}
}#>