// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Spec.Homepage
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Search")]
    [NUnit.Framework.CategoryAttribute("Search")]
    public partial class SearchFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Search.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Search", @"I want to be able to use search functionality to search requested content on the site.
I want to be able to perform search by using enter key.
I want to block search performed by using sql injection.
I want to block search performed by using string with special characters.
I want to block search performed by using with white space.", ProgrammingLanguage.CSharp, new string[] {
                        "Search"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 9
#line 10
 testRunner.Given("I\'m on the Homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search - Should not search when no phrase entered")]
        [NUnit.Framework.CategoryAttribute("capacityconferences.com")]
        [NUnit.Framework.CategoryAttribute("emergingmarkets.org")]
        [NUnit.Framework.CategoryAttribute("petroleumeconomist.com")]
        [NUnit.Framework.CategoryAttribute("managingip.com")]
        [NUnit.Framework.CategoryAttribute("euromoneyconferences.com")]
        public virtual void Search_ShouldNotSearchWhenNoPhraseEntered()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search - Should not search when no phrase entered", new string[] {
                        "capacityconferences.com",
                        "emergingmarkets.org",
                        "petroleumeconomist.com",
                        "managingip.com",
                        "euromoneyconferences.com"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line 9
this.FeatureBackground();
#line 15
 testRunner.When("I perform search with an empty phrase", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("Search process shouldn\'t start", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search - Should display Advanced Search Page when no phrase entered")]
        [NUnit.Framework.CategoryAttribute("euromoneytraining.com")]
        [NUnit.Framework.CategoryAttribute("capacitymagazine.com")]
        public virtual void Search_ShouldDisplayAdvancedSearchPageWhenNoPhraseEntered()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search - Should display Advanced Search Page when no phrase entered", new string[] {
                        "euromoneytraining.com",
                        "capacitymagazine.com"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line 9
this.FeatureBackground();
#line 20
 testRunner.When("I perform search with an empty phrase", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
 testRunner.Then("Advanced Search Page should be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search - Should display Advanced Search page correctly")]
        [NUnit.Framework.CategoryAttribute("euromoneytraining.com")]
        [NUnit.Framework.CategoryAttribute("capacitymagazine.com")]
        public virtual void Search_ShouldDisplayAdvancedSearchPageCorrectly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search - Should display Advanced Search page correctly", new string[] {
                        "euromoneytraining.com",
                        "capacitymagazine.com"});
#line 24
this.ScenarioSetup(scenarioInfo);
#line 9
this.FeatureBackground();
#line 25
 testRunner.When("I perform search with an empty phrase", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
 testRunner.Then("Advanced search page should be displayed correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search - Should not search when whitespaces entered")]
        [NUnit.Framework.CategoryAttribute("capacityconferences.com")]
        [NUnit.Framework.CategoryAttribute("euromoneytraining.com")]
        [NUnit.Framework.CategoryAttribute("emergingmarkets.org")]
        [NUnit.Framework.CategoryAttribute("petroleumeconomist.com")]
        [NUnit.Framework.CategoryAttribute("managingip.com")]
        [NUnit.Framework.CategoryAttribute("euromoneyconferences.com")]
        public virtual void Search_ShouldNotSearchWhenWhitespacesEntered()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search - Should not search when whitespaces entered", new string[] {
                        "capacityconferences.com",
                        "euromoneytraining.com",
                        "emergingmarkets.org",
                        "petroleumeconomist.com",
                        "managingip.com",
                        "euromoneyconferences.com"});
#line 30
this.ScenarioSetup(scenarioInfo);
#line 9
this.FeatureBackground();
#line 31
 testRunner.When("I perform search with white spaces", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
 testRunner.Then("Search process shouldn\'t start", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search - Should display search results")]
        [NUnit.Framework.CategoryAttribute("capacityconferences.com")]
        [NUnit.Framework.CategoryAttribute("euromoneytraining.com")]
        [NUnit.Framework.CategoryAttribute("emergingmarkets.org")]
        [NUnit.Framework.CategoryAttribute("petroleumeconomist.com")]
        [NUnit.Framework.CategoryAttribute("managingip.com")]
        [NUnit.Framework.CategoryAttribute("capacitymagazine.com")]
        [NUnit.Framework.CategoryAttribute("euromoneyconferences.com")]
        [NUnit.Framework.CategoryAttribute("hedgefundintelligence.com")]
        [NUnit.Framework.CategoryAttribute("globaltelecomsbusiness.com")]
        public virtual void Search_ShouldDisplaySearchResults()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search - Should display search results", new string[] {
                        "capacityconferences.com",
                        "euromoneytraining.com",
                        "emergingmarkets.org",
                        "petroleumeconomist.com",
                        "managingip.com",
                        "capacitymagazine.com",
                        "euromoneyconferences.com",
                        "hedgefundintelligence.com",
                        "globaltelecomsbusiness.com"});
#line 37
this.ScenarioSetup(scenarioInfo);
#line 9
this.FeatureBackground();
#line 38
 testRunner.When("I perform search with \"banking\" phrase", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
 testRunner.Then("Search results page should be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search - Should display search results page correclty")]
        [NUnit.Framework.CategoryAttribute("capacityconferences.com")]
        [NUnit.Framework.CategoryAttribute("euromoneytraining.com")]
        [NUnit.Framework.CategoryAttribute("emergingmarkets.org")]
        [NUnit.Framework.CategoryAttribute("petroleumeconomist.com")]
        [NUnit.Framework.CategoryAttribute("managingip.com")]
        [NUnit.Framework.CategoryAttribute("capacitymagazine.com")]
        [NUnit.Framework.CategoryAttribute("euromoneyconferences.com")]
        [NUnit.Framework.CategoryAttribute("hedgefundintelligence.com")]
        [NUnit.Framework.CategoryAttribute("globaltelecomsbusiness.com")]
        public virtual void Search_ShouldDisplaySearchResultsPageCorreclty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search - Should display search results page correclty", new string[] {
                        "capacityconferences.com",
                        "euromoneytraining.com",
                        "emergingmarkets.org",
                        "petroleumeconomist.com",
                        "managingip.com",
                        "capacitymagazine.com",
                        "euromoneyconferences.com",
                        "hedgefundintelligence.com",
                        "globaltelecomsbusiness.com"});
#line 44
this.ScenarioSetup(scenarioInfo);
#line 9
this.FeatureBackground();
#line 45
 testRunner.When("I perform search with \"banking\" phrase", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
 testRunner.Then("Search results page should be displayed correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search - Should perform search when search executed with enter button")]
        [NUnit.Framework.CategoryAttribute("capacityconferences.com")]
        [NUnit.Framework.CategoryAttribute("euromoneytraining.com")]
        [NUnit.Framework.CategoryAttribute("emergingmarkets.org")]
        [NUnit.Framework.CategoryAttribute("petroleumeconomist.com")]
        [NUnit.Framework.CategoryAttribute("managingip.com")]
        [NUnit.Framework.CategoryAttribute("capacitymagazine.com")]
        [NUnit.Framework.CategoryAttribute("hedgefundintelligence.com")]
        [NUnit.Framework.CategoryAttribute("globaltelecomsbusiness.com")]
        public virtual void Search_ShouldPerformSearchWhenSearchExecutedWithEnterButton()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search - Should perform search when search executed with enter button", new string[] {
                        "capacityconferences.com",
                        "euromoneytraining.com",
                        "emergingmarkets.org",
                        "petroleumeconomist.com",
                        "managingip.com",
                        "capacitymagazine.com",
                        "hedgefundintelligence.com",
                        "globaltelecomsbusiness.com"});
#line 50
this.ScenarioSetup(scenarioInfo);
#line 9
this.FeatureBackground();
#line 51
 testRunner.When("I perform search with \"banking\" phrase and I press enter key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
 testRunner.Then("Search results page should be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search - Should not search when SQL Injection query entered")]
        [NUnit.Framework.CategoryAttribute("capacityconferences.com")]
        [NUnit.Framework.CategoryAttribute("euromoneytraining.com")]
        [NUnit.Framework.CategoryAttribute("emergingmarkets.org")]
        [NUnit.Framework.CategoryAttribute("petroleumeconomist.com")]
        [NUnit.Framework.CategoryAttribute("managingip.com")]
        public virtual void Search_ShouldNotSearchWhenSQLInjectionQueryEntered()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search - Should not search when SQL Injection query entered", new string[] {
                        "capacityconferences.com",
                        "euromoneytraining.com",
                        "emergingmarkets.org",
                        "petroleumeconomist.com",
                        "managingip.com"});
#line 56
this.ScenarioSetup(scenarioInfo);
#line 9
this.FeatureBackground();
#line 57
 testRunner.When("I perform search with SQL injection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
 testRunner.Then("Search process shouldn\'t start", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search - Should not search when special characters entered")]
        [NUnit.Framework.CategoryAttribute("capacityconferences.com")]
        [NUnit.Framework.CategoryAttribute("euromoneytraining.com")]
        [NUnit.Framework.CategoryAttribute("emergingmarkets.org")]
        [NUnit.Framework.CategoryAttribute("petroleumeconomist.com")]
        [NUnit.Framework.CategoryAttribute("managingip.com")]
        public virtual void Search_ShouldNotSearchWhenSpecialCharactersEntered()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search - Should not search when special characters entered", new string[] {
                        "capacityconferences.com",
                        "euromoneytraining.com",
                        "emergingmarkets.org",
                        "petroleumeconomist.com",
                        "managingip.com"});
#line 62
this.ScenarioSetup(scenarioInfo);
#line 9
this.FeatureBackground();
#line 63
 testRunner.When("I perform search with string with special characters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 64
 testRunner.Then("Search process shouldn\'t start", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
