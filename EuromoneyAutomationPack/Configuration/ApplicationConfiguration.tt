<#@ template language="C#" hostspecific="True" debug="True" 
#><#@ output extension=".cs" 
#><#@ assembly name="System.Core" 
#><#@ assembly name="System.Xml" 
#><#@ import namespace="System.Linq" 
#><#@ import namespace="System.IO" 
#><#@ import namespace="System.Text" 
#><#@ import namespace="System.Reflection" 
#><#@ import namespace="System.Xml" 
#><#@include file="T4Manager.ttinclude"
#><# var manager = Manager.Create(Host, GenerationEnvironment); #><#
	ApplicationConfiguration.Host = Host;
	ApplicationConfiguration.Doc = new XmlDocument();
	ApplicationConfiguration.FileContent = new StreamReader(new DirectoryInfo(Host.ResolvePath(string.Empty)).FullName.ToString()+"\\..\\Bin\\Debug\\Configuration\\ApplicationConfiguration.xml").ReadToEnd();
	ApplicationConfiguration.Doc.LoadXml(ApplicationConfiguration.FileContent); #>
// -----------------------------------------------------------------------
// <copyright file="ApplicationConfiguration.cs" company="Euromoney">
// TODO: Update copyright text.
// </copyright>
// <auto-generated />
// -----------------------------------------------------------------------

namespace Core.Configuration
{
	using System.Collections.Generic;
	using System.Globalization;
	using Core;
	using Core.Controls;

	/// <summary>
	/// Initializes a new instance of the ApplicationConfiguration class 
	/// </summary>
	public static class ApplicationConfiguration
	{
<# for (int keyIterator = 0; keyIterator < ApplicationConfiguration.NumberOfKeys(); keyIterator++) { #>
<# if (ApplicationConfiguration.KeyTypeByIndex(keyIterator) == "Int") { #>
		/// <summary>
		/// Gets <#= ApplicationConfiguration.KeyNameByIndex(keyIterator) #> value
		/// </summary>
		public static int <#= ApplicationConfiguration.KeyNameByIndex(keyIterator) #>
		{
			get { return int.Parse("<#= ApplicationConfiguration.KeyValueByIndex(keyIterator) #>"); }
		}
		<# }
		else if (ApplicationConfiguration.KeyTypeByIndex(keyIterator) == "Bool")
		{#>
		/// <summary>
		/// Gets <#= ApplicationConfiguration.KeyNameByIndex(keyIterator) #> value
		/// </summary>
		public static bool <#= ApplicationConfiguration.KeyNameByIndex(keyIterator) #>
		{
			get { return bool.Parse("<#= ApplicationConfiguration.KeyValueByIndex(keyIterator) #>"); }
		}
<# } 
		else { #>
		/// <summary>
		/// Gets <#= ApplicationConfiguration.KeyNameByIndex(keyIterator) #> value
		/// </summary>
		public static string <#= ApplicationConfiguration.KeyNameByIndex(keyIterator) #>
		{
			get { return @"<#= ApplicationConfiguration.KeyValueByIndex(keyIterator) #>"; }
		}
<# } #>

<# } #>
	}
}
<# manager.Process(true); #>
<#+ 
public class ApplicationConfiguration
{
	public static ITextTemplatingEngineHost Host { get; set; }

	public static string FileContent { get; set; }

	public static XmlDocument Doc { get; set; }

	public static int NumberOfKeys()
	{
		return Doc.SelectNodes("//Configuration/Key").Count;
	}

	public static string KeyNameByIndex(int index)
	{
		return Doc.SelectNodes("//Configuration/Key").Item(index).Attributes["name"].Value;
	}

	public static string KeyValueByIndex(int index)
	{
		return Doc.SelectNodes("//Configuration/Key").Item(index).Attributes["value"].Value;
	}

	public static string KeyTypeByIndex(int index)
	{
		return Doc.SelectNodes("//Configuration/Key").Item(index).Attributes["type"].Value;
	}
}
#>